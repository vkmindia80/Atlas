{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\nclass ProjectService {\n  getAuthHeaders() {\n    const token = localStorage.getItem('access_token');\n    return {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    };\n  }\n  async getProjects(params) {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/`, {\n      ...this.getAuthHeaders(),\n      params\n    });\n    return response.data;\n  }\n  async getProject(id) {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/${id}`, this.getAuthHeaders());\n    return response.data;\n  }\n  async getProjectDetail(id) {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/${id}`, this.getAuthHeaders());\n    return response.data;\n  }\n  async createProject(project) {\n    const response = await axios.post(`${API_BASE}/api/v1/projects/`, project, this.getAuthHeaders());\n    return response.data;\n  }\n  async updateProject(id, project) {\n    const response = await axios.put(`${API_BASE}/api/v1/projects/${id}`, project, this.getAuthHeaders());\n    return response.data;\n  }\n  async deleteProject(id) {\n    await axios.delete(`${API_BASE}/api/v1/projects/${id}`, this.getAuthHeaders());\n  }\n\n  // Task management\n  async createTask(projectId, task) {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/tasks`, task, this.getAuthHeaders());\n  }\n  async updateTask(projectId, taskId, task) {\n    await axios.put(`${API_BASE}/api/v1/projects/${projectId}/tasks/${taskId}`, task, this.getAuthHeaders());\n  }\n  async deleteTask(projectId, taskId) {\n    await axios.delete(`${API_BASE}/api/v1/projects/${projectId}/tasks/${taskId}`, this.getAuthHeaders());\n  }\n\n  // Issue management\n  async createIssue(projectId, issue) {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/issues`, issue, this.getAuthHeaders());\n  }\n\n  // Risk management\n  async createRisk(projectId, risk) {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/risks`, risk, this.getAuthHeaders());\n  }\n\n  // Baseline management\n  async createBaseline(projectId, baselineData) {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/baselines`, baselineData, this.getAuthHeaders());\n  }\n\n  // Approval workflow\n  async requestApproval(projectId, approvalData) {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/approvals`, approvalData, this.getAuthHeaders());\n  }\n  async processApproval(projectId, approvalId, decision) {\n    await axios.put(`${API_BASE}/api/v1/projects/${projectId}/approvals/${approvalId}`, decision, this.getAuthHeaders());\n  }\n\n  // Bulk operations\n  async bulkUpdateStatus(updates) {\n    const response = await axios.post(`${API_BASE}/api/v1/projects/bulk-update-status`, updates, this.getAuthHeaders());\n    return response.data;\n  }\n  async importFromCSV(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await axios.post(`${API_BASE}/api/v1/projects/import-csv`, formData, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n\n  // Project templates\n  async getProjectTemplates() {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/templates/`, this.getAuthHeaders());\n    return response.data;\n  }\n  async createProjectTemplate(template) {\n    await axios.post(`${API_BASE}/api/v1/projects/templates/`, template, this.getAuthHeaders());\n  }\n\n  // Intake form\n  async createProjectFromIntake(intakeData) {\n    const response = await axios.post(`${API_BASE}/api/v1/projects/from-intake`, intakeData, this.getAuthHeaders());\n    return response.data;\n  }\n}\nexport const projectService = new ProjectService();","map":{"version":3,"names":["axios","API_BASE","process","env","REACT_APP_BACKEND_URL","ProjectService","getAuthHeaders","token","localStorage","getItem","headers","getProjects","params","response","get","data","getProject","id","getProjectDetail","createProject","project","post","updateProject","put","deleteProject","delete","createTask","projectId","task","updateTask","taskId","deleteTask","createIssue","issue","createRisk","risk","createBaseline","baselineData","requestApproval","approvalData","processApproval","approvalId","decision","bulkUpdateStatus","updates","importFromCSV","file","formData","FormData","append","getProjectTemplates","createProjectTemplate","template","createProjectFromIntake","intakeData","projectService"],"sources":["/app/frontend/src/services/projectService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Project, ProjectCreate, ProjectDetail, ProjectTask, ProjectIssue, ProjectRisk, ProjectIntakeForm } from '../types/project';\n\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\n\nclass ProjectService {\n  private getAuthHeaders() {\n    const token = localStorage.getItem('access_token');\n    return {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    };\n  }\n\n  async getProjects(params?: {\n    skip?: number;\n    limit?: number;\n    status?: string;\n    portfolio_id?: string;\n    project_manager_id?: string;\n    project_type?: string;\n  }): Promise<Project[]> {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/`, {\n      ...this.getAuthHeaders(),\n      params,\n    });\n    return response.data;\n  }\n\n  async getProject(id: string): Promise<Project> {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/${id}`, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async getProjectDetail(id: string): Promise<ProjectDetail> {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/${id}`, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async createProject(project: ProjectCreate): Promise<Project> {\n    const response = await axios.post(`${API_BASE}/api/v1/projects/`, project, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async updateProject(id: string, project: Partial<Project>): Promise<Project> {\n    const response = await axios.put(`${API_BASE}/api/v1/projects/${id}`, project, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await axios.delete(`${API_BASE}/api/v1/projects/${id}`, this.getAuthHeaders());\n  }\n\n  // Task management\n  async createTask(projectId: string, task: Partial<ProjectTask>): Promise<void> {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/tasks`, task, this.getAuthHeaders());\n  }\n\n  async updateTask(projectId: string, taskId: string, task: Partial<ProjectTask>): Promise<void> {\n    await axios.put(`${API_BASE}/api/v1/projects/${projectId}/tasks/${taskId}`, task, this.getAuthHeaders());\n  }\n\n  async deleteTask(projectId: string, taskId: string): Promise<void> {\n    await axios.delete(`${API_BASE}/api/v1/projects/${projectId}/tasks/${taskId}`, this.getAuthHeaders());\n  }\n\n  // Issue management\n  async createIssue(projectId: string, issue: Partial<ProjectIssue>): Promise<void> {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/issues`, issue, this.getAuthHeaders());\n  }\n\n  // Risk management\n  async createRisk(projectId: string, risk: Partial<ProjectRisk>): Promise<void> {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/risks`, risk, this.getAuthHeaders());\n  }\n\n  // Baseline management\n  async createBaseline(projectId: string, baselineData: any): Promise<void> {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/baselines`, baselineData, this.getAuthHeaders());\n  }\n\n  // Approval workflow\n  async requestApproval(projectId: string, approvalData: any): Promise<void> {\n    await axios.post(`${API_BASE}/api/v1/projects/${projectId}/approvals`, approvalData, this.getAuthHeaders());\n  }\n\n  async processApproval(projectId: string, approvalId: string, decision: any): Promise<void> {\n    await axios.put(\n      `${API_BASE}/api/v1/projects/${projectId}/approvals/${approvalId}`,\n      decision,\n      this.getAuthHeaders()\n    );\n  }\n\n  // Bulk operations\n  async bulkUpdateStatus(updates: Array<{ project_id: string; status: string }>): Promise<any> {\n    const response = await axios.post(\n      `${API_BASE}/api/v1/projects/bulk-update-status`,\n      updates,\n      this.getAuthHeaders()\n    );\n    return response.data;\n  }\n\n  async importFromCSV(file: File): Promise<any> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await axios.post(\n      `${API_BASE}/api/v1/projects/import-csv`,\n      formData,\n      {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    );\n    return response.data;\n  }\n\n  // Project templates\n  async getProjectTemplates(): Promise<any[]> {\n    const response = await axios.get(`${API_BASE}/api/v1/projects/templates/`, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async createProjectTemplate(template: any): Promise<void> {\n    await axios.post(`${API_BASE}/api/v1/projects/templates/`, template, this.getAuthHeaders());\n  }\n\n  // Intake form\n  async createProjectFromIntake(intakeData: {\n    intake_data: ProjectIntakeForm;\n    template_id?: string;\n    auto_approve?: boolean;\n  }): Promise<any> {\n    const response = await axios.post(\n      `${API_BASE}/api/v1/projects/from-intake`,\n      intakeData,\n      this.getAuthHeaders()\n    );\n    return response.data;\n  }\n}\n\nexport const projectService = new ProjectService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}