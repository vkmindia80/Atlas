{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001',\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Response interceptor for handling token refresh\n    this.api.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        const refreshToken = localStorage.getItem('refresh_token');\n        if (refreshToken) {\n          try {\n            const response = await this.refreshToken(refreshToken);\n            localStorage.setItem('access_token', response.access_token);\n            // Retry original request\n            return this.api.request(error.config);\n          } catch (refreshError) {\n            this.clearTokens();\n            window.location.href = '/login';\n          }\n        } else {\n          this.clearTokens();\n          window.location.href = '/login';\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n  clearTokens() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n\n  // Authentication methods\n  async registerTenant(data) {\n    const response = await this.api.post('/api/v1/auth/register-tenant', data);\n    return response.data;\n  }\n  async login(credentials) {\n    const response = await this.api.post('/api/v1/auth/login', credentials);\n    const authData = response.data;\n\n    // Store tokens\n    localStorage.setItem('access_token', authData.access_token);\n    localStorage.setItem('refresh_token', authData.refresh_token);\n    return authData;\n  }\n  async refreshToken(refreshToken) {\n    const response = await this.api.post('/api/v1/auth/refresh', {\n      refresh_token: refreshToken\n    });\n    return response.data;\n  }\n  async logout() {\n    try {\n      await this.api.post('/api/v1/auth/logout');\n    } finally {\n      this.clearTokens();\n    }\n  }\n  async getCurrentUser() {\n    const response = await this.api.get('/api/v1/auth/me');\n    return response.data;\n  }\n\n  // Generic CRUD methods\n  async get(endpoint, params) {\n    const response = await this.api.get(endpoint, {\n      params\n    });\n    return response.data;\n  }\n  async post(endpoint, data) {\n    const response = await this.api.post(endpoint, data);\n    return response.data;\n  }\n  async put(endpoint, data) {\n    const response = await this.api.put(endpoint, data);\n    return response.data;\n  }\n  async delete(endpoint) {\n    const response = await this.api.delete(endpoint);\n    return response.data;\n  }\n\n  // Health check\n  async healthCheck() {\n    const response = await this.api.get('/health');\n    return response.data;\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","process","env","REACT_APP_BACKEND_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","refreshToken","setItem","access_token","refreshError","clearTokens","window","location","href","removeItem","registerTenant","data","post","login","credentials","authData","refresh_token","logout","getCurrentUser","get","endpoint","params","put","delete","healthCheck","apiService"],"sources":["/app/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { AuthResponse, LoginCredentials, TenantRegistration } from '../types/auth';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001',\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('access_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor for handling token refresh\n    this.api.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        if (error.response?.status === 401) {\n          const refreshToken = localStorage.getItem('refresh_token');\n          if (refreshToken) {\n            try {\n              const response = await this.refreshToken(refreshToken);\n              localStorage.setItem('access_token', response.access_token);\n              // Retry original request\n              return this.api.request(error.config);\n            } catch (refreshError) {\n              this.clearTokens();\n              window.location.href = '/login';\n            }\n          } else {\n            this.clearTokens();\n            window.location.href = '/login';\n          }\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  private clearTokens(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n\n  // Authentication methods\n  async registerTenant(data: TenantRegistration): Promise<any> {\n    const response = await this.api.post('/api/v1/auth/register-tenant', data);\n    return response.data;\n  }\n\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await this.api.post('/api/v1/auth/login', credentials);\n    const authData = response.data;\n    \n    // Store tokens\n    localStorage.setItem('access_token', authData.access_token);\n    localStorage.setItem('refresh_token', authData.refresh_token);\n    \n    return authData;\n  }\n\n  async refreshToken(refreshToken: string): Promise<{ access_token: string; token_type: string; expires_in: number }> {\n    const response = await this.api.post('/api/v1/auth/refresh', { refresh_token: refreshToken });\n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await this.api.post('/api/v1/auth/logout');\n    } finally {\n      this.clearTokens();\n    }\n  }\n\n  async getCurrentUser(): Promise<any> {\n    const response = await this.api.get('/api/v1/auth/me');\n    return response.data;\n  }\n\n  // Generic CRUD methods\n  async get<T>(endpoint: string, params?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.api.get(endpoint, { params });\n    return response.data;\n  }\n\n  async post<T>(endpoint: string, data: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.api.post(endpoint, data);\n    return response.data;\n  }\n\n  async put<T>(endpoint: string, data: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.api.put(endpoint, data);\n    return response.data;\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.api.delete(endpoint);\n    return response.data;\n  }\n\n  // Health check\n  async healthCheck(): Promise<any> {\n    const response = await this.api.get('/health');\n    return response.data;\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}