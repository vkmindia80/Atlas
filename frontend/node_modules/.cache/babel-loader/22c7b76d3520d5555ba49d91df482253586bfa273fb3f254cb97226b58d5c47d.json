{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\nclass PortfolioService {\n  getAuthHeaders() {\n    const token = localStorage.getItem('access_token');\n    return {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    };\n  }\n  async getPortfolios(params) {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/`, {\n      ...this.getAuthHeaders(),\n      params\n    });\n    return response.data;\n  }\n  async getPortfolio(id) {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/${id}`, this.getAuthHeaders());\n    return response.data;\n  }\n  async createPortfolio(portfolio) {\n    const response = await axios.post(`${API_BASE}/api/v1/portfolios/`, portfolio, this.getAuthHeaders());\n    return response.data;\n  }\n  async updatePortfolio(id, portfolio) {\n    const response = await axios.put(`${API_BASE}/api/v1/portfolios/${id}`, portfolio, this.getAuthHeaders());\n    return response.data;\n  }\n  async deletePortfolio(id) {\n    await axios.delete(`${API_BASE}/api/v1/portfolios/${id}`, this.getAuthHeaders());\n  }\n  async getPortfolioProjects(portfolioId) {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/${portfolioId}/projects`, this.getAuthHeaders());\n    return response.data;\n  }\n  async addProjectToPortfolio(portfolioId, projectId, relationshipData) {\n    await axios.post(`${API_BASE}/api/v1/portfolios/${portfolioId}/projects/${projectId}`, relationshipData || {}, this.getAuthHeaders());\n  }\n  async removeProjectFromPortfolio(portfolioId, projectId) {\n    await axios.delete(`${API_BASE}/api/v1/portfolios/${portfolioId}/projects/${projectId}`, this.getAuthHeaders());\n  }\n  async getPortfolioDashboard(portfolioId) {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/${portfolioId}/dashboard`, this.getAuthHeaders());\n    return response.data;\n  }\n  async createPortfolioSnapshot(portfolioId, snapshotData) {\n    await axios.post(`${API_BASE}/api/v1/portfolios/${portfolioId}/snapshots`, snapshotData, this.getAuthHeaders());\n  }\n\n  // Strategic Objectives\n  async getStrategicObjectives() {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/objectives/`, this.getAuthHeaders());\n    return response.data;\n  }\n  async createStrategicObjective(objective) {\n    const response = await axios.post(`${API_BASE}/api/v1/portfolios/objectives/`, objective, this.getAuthHeaders());\n    return response.data;\n  }\n  async updateStrategicObjective(id, objective) {\n    const response = await axios.put(`${API_BASE}/api/v1/portfolios/objectives/${id}`, objective, this.getAuthHeaders());\n    return response.data;\n  }\n}\nexport const portfolioService = new PortfolioService();","map":{"version":3,"names":["axios","API_BASE","process","env","REACT_APP_BACKEND_URL","PortfolioService","getAuthHeaders","token","localStorage","getItem","headers","getPortfolios","params","response","get","data","getPortfolio","id","createPortfolio","portfolio","post","updatePortfolio","put","deletePortfolio","delete","getPortfolioProjects","portfolioId","addProjectToPortfolio","projectId","relationshipData","removeProjectFromPortfolio","getPortfolioDashboard","createPortfolioSnapshot","snapshotData","getStrategicObjectives","createStrategicObjective","objective","updateStrategicObjective","portfolioService"],"sources":["/app/frontend/src/services/portfolioService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Portfolio, PortfolioCreate, PortfolioDashboard, PortfolioProject, StrategicObjective } from '../types/portfolio';\n\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\n\nclass PortfolioService {\n  private getAuthHeaders() {\n    const token = localStorage.getItem('access_token');\n    return {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    };\n  }\n\n  async getPortfolios(params?: {\n    skip?: number;\n    limit?: number;\n    status?: string;\n    portfolio_type?: string;\n    portfolio_manager_id?: string;\n  }): Promise<Portfolio[]> {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/`, {\n      ...this.getAuthHeaders(),\n      params,\n    });\n    return response.data;\n  }\n\n  async getPortfolio(id: string): Promise<Portfolio> {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/${id}`, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async createPortfolio(portfolio: PortfolioCreate): Promise<Portfolio> {\n    const response = await axios.post(`${API_BASE}/api/v1/portfolios/`, portfolio, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async updatePortfolio(id: string, portfolio: Partial<Portfolio>): Promise<Portfolio> {\n    const response = await axios.put(`${API_BASE}/api/v1/portfolios/${id}`, portfolio, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async deletePortfolio(id: string): Promise<void> {\n    await axios.delete(`${API_BASE}/api/v1/portfolios/${id}`, this.getAuthHeaders());\n  }\n\n  async getPortfolioProjects(portfolioId: string): Promise<PortfolioProject[]> {\n    const response = await axios.get(\n      `${API_BASE}/api/v1/portfolios/${portfolioId}/projects`,\n      this.getAuthHeaders()\n    );\n    return response.data;\n  }\n\n  async addProjectToPortfolio(\n    portfolioId: string,\n    projectId: string,\n    relationshipData?: any\n  ): Promise<void> {\n    await axios.post(\n      `${API_BASE}/api/v1/portfolios/${portfolioId}/projects/${projectId}`,\n      relationshipData || {},\n      this.getAuthHeaders()\n    );\n  }\n\n  async removeProjectFromPortfolio(portfolioId: string, projectId: string): Promise<void> {\n    await axios.delete(\n      `${API_BASE}/api/v1/portfolios/${portfolioId}/projects/${projectId}`,\n      this.getAuthHeaders()\n    );\n  }\n\n  async getPortfolioDashboard(portfolioId: string): Promise<PortfolioDashboard> {\n    const response = await axios.get(\n      `${API_BASE}/api/v1/portfolios/${portfolioId}/dashboard`,\n      this.getAuthHeaders()\n    );\n    return response.data;\n  }\n\n  async createPortfolioSnapshot(portfolioId: string, snapshotData: any): Promise<void> {\n    await axios.post(\n      `${API_BASE}/api/v1/portfolios/${portfolioId}/snapshots`,\n      snapshotData,\n      this.getAuthHeaders()\n    );\n  }\n\n  // Strategic Objectives\n  async getStrategicObjectives(): Promise<StrategicObjective[]> {\n    const response = await axios.get(`${API_BASE}/api/v1/portfolios/objectives/`, this.getAuthHeaders());\n    return response.data;\n  }\n\n  async createStrategicObjective(objective: any): Promise<StrategicObjective> {\n    const response = await axios.post(\n      `${API_BASE}/api/v1/portfolios/objectives/`,\n      objective,\n      this.getAuthHeaders()\n    );\n    return response.data;\n  }\n\n  async updateStrategicObjective(id: string, objective: any): Promise<StrategicObjective> {\n    const response = await axios.put(\n      `${API_BASE}/api/v1/portfolios/objectives/${id}`,\n      objective,\n      this.getAuthHeaders()\n    );\n    return response.data;\n  }\n}\n\nexport const portfolioService = new PortfolioService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}