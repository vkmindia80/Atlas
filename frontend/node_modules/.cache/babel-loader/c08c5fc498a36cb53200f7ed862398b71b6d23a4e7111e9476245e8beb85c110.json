{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/store/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { apiService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  loading: true,\n  error: null\n};\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState,\n        loading: false\n      };\n    case 'REFRESH_USER':\n      return {\n        ...state,\n        user: action.payload\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    default:\n      return state;\n  }\n}\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        try {\n          const user = await apiService.getCurrentUser();\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: {\n              user,\n              token\n            }\n          });\n        } catch (error) {\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          dispatch({\n            type: 'SET_LOADING',\n            payload: false\n          });\n        }\n      } else {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async credentials => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      const authResponse = await apiService.login(credentials);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: authResponse.user,\n          token: authResponse.access_token\n        }\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await apiService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      dispatch({\n        type: 'LOGOUT'\n      });\n    }\n  };\n  const refreshUser = async () => {\n    try {\n      const user = await apiService.getCurrentUser();\n      dispatch({\n        type: 'REFRESH_USER',\n        payload: user\n      });\n    } catch (error) {\n      console.error('Failed to refresh user:', error);\n    }\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    refreshUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","undefined","initialState","isAuthenticated","user","token","loading","error","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","initializeAuth","localStorage","getItem","getCurrentUser","removeItem","login","credentials","authResponse","access_token","_error$response","_error$response$data","errorMessage","response","data","detail","logout","console","refreshUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/app/frontend/src/store/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport { AuthState, User, LoginCredentials } from '../types/auth';\nimport { apiService } from '../services/api';\n\ninterface AuthContextType extends AuthState {\n  login: (credentials: LoginCredentials) => Promise<void>;\n  logout: () => void;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ntype AuthAction =\n  | { type: 'LOGIN_START' }\n  | { type: 'LOGIN_SUCCESS'; payload: { user: User; token: string } }\n  | { type: 'LOGIN_FAILURE'; payload: string }\n  | { type: 'LOGOUT' }\n  | { type: 'REFRESH_USER'; payload: User }\n  | { type: 'SET_LOADING'; payload: boolean };\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  loading: true,\n  error: null,\n};\n\nfunction authReducer(state: AuthState, action: AuthAction): AuthState {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload,\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState,\n        loading: false,\n      };\n    case 'REFRESH_USER':\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        try {\n          const user = await apiService.getCurrentUser();\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: { user, token },\n          });\n        } catch (error) {\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          dispatch({ type: 'SET_LOADING', payload: false });\n        }\n      } else {\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (credentials: LoginCredentials) => {\n    dispatch({ type: 'LOGIN_START' });\n    try {\n      const authResponse = await apiService.login(credentials);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: authResponse.user,\n          token: authResponse.access_token,\n        },\n      });\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || 'Login failed';\n      dispatch({ type: 'LOGIN_FAILURE', payload: errorMessage });\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await apiService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      dispatch({ type: 'LOGOUT' });\n    }\n  };\n\n  const refreshUser = async () => {\n    try {\n      const user = await apiService.getCurrentUser();\n      dispatch({ type: 'REFRESH_USER', payload: user });\n    } catch (error) {\n      console.error('Failed to refresh user:', error);\n    }\n  };\n\n  const value: AuthContextType = {\n    ...state,\n    login,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}